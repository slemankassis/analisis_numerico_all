índicesiguiente |anterior |Intro a M y O »
Representación Gráfica
La representación de cualquier serie de datos es uno de los puntos fuertes de Matlab. Dispone de funciones para representar series de puntos, superfícies, curvas de nivel... Prácticamente cualquier cosa puede representarse gráficamente en Matlab aunque aquí nos centraremos en los comandos más simples

Curvas en el plano
La necesidad más simple de la representación gráfica es disponer de dos series de datos x e y y representar en el plano la serie de datos siendo x la coordenada del eje de abcisas e y la coordenada del eje de ordenadas. Esta operación se lleva a cabo mediante la función plot independientemente de la complejidad de los datos.

plot(...)
Representa series de datos en el plano. Las posibilidades de uso de esta función son infinitas y la ayuda, que no se reproducirá aquí, es de las más extensas del lenguaje.

Para que nos hagamos una idea aproximada de la potencia del comando plot sirvan estos tres ejemplos.

>> plot([1,2,3,2,1]);
_images/simpleplot.png
Figura generada por el comando anterior

>> x = linspace(-pi,pi,64);
>> plot(x,sin(x))
_images/sinplot.png
Figura generada por el comando anterior

>> x = linspace(-pi,pi,64);
>> plot(x,sin(x),'ro','markersize',5)
_images/sinplot_dots.png
Figura generada por el comando anterior

El comando plot puede recibir una cantidad infinita de argumentos pero debemos agruparlos de una manera característica. Los dos primeros argumentos serán siempre datos, ya sean vectores o matrices. El tercer argumento será una cadena de dos caracteres con una letra, designando el color, y un símbolo, designando el tipo de línea o marcador. Seguidamente se pueden modificar los atributos tales como el grosor de la línea, el tamaño del marcador... Una vez terminado un grupo se puede empezar otra vez con dos argumentos con datos y así indefinidamente.

Figura activa
Lo más importante de representar gráficos en Matlab es el concepto de figura activa. Matlab puede tener abiertas centenares de ventanas al mismo tiempo pero sólo podrá representar datos en una: la figura activa. Podemos controlar dicha figura mediante el comando figure

figure(n)
Comando que crea una nueva figura o selecciona como activa la figura dada. Cada figura tiene asignada un número entero, si n es una figura no existente creará una nueva y la activará, si n existe activará la figura correspondiente.

Otra consideración importante es que cada vez que representemos datos en la figura activa todo lo que esté ya en ella se va a borrar. Este comportamiento no es el deseado en muchos casos y puede modificarse mediante el comando hold

hold
Cambia el comportamiento de la ventana activa. Funciona como un interruptor: hold on hace que cada dato se represente sobre lo anterior y hold of borra la ventana antes de pintar en ella. Por omisión se encuentra en off.

Un comando bastante útil es clf, que borra la figura activa.

Etiquetas
El paso siguiente es poner etiquetas: un identificador para cada eje y un título si lo creemos necesario. Las etiquetas se aplicarán, tal como se ha justificado en la sección anterior, sólo en la ventana activa.

title(str)
Añade un título a la figura activa

xlabel(str)
Añade una etiqueta al eje x de la ventana activa

ylabel(str)
Añade una etiqueta al eje y de la ventana activa

Por ejemplo

x = linspace(0,500,10000);
plot(x,exp(-x/100).*sin(x));
title('Una funcion cualquiera')
xlabel('Tiempo')
ylabel('Amplitud')
Con el código anterior se obtiene la siguiente figura:

_images/labels.png
Ejemplo de etiquetas

El paso siguiente es dotar a los gráficos con más de una curva de una leyenda que las distinga. Esto se consigue mediante la función legend.

legend(...)
Al igual que con plot podemos utilizar esta función de múltiples maneras. La más simple es pasarle como argumento tantas cadenas de caracteres como curvas hayamos representado y automáticamente asignará por orden cada curva al identificador.

Supongamos que queremos representar el seno hiperbólico y el coseno hiperbólico y para distinguirlos no nos vale acordarnos que Matlab siempre pinta la primera curva en azul y la segunda en verde. Para ello podemos hacer lo siguiente:

x = linspace(-pi,pi,100);
plot(x,sinh(x),x,cosh(x));
legend('seno hiperbolico','coseno hiperbolico');
_images/legend.png
Ejemplo de aplicación de la leyenda

Otros comandos
No todas las curvas en el plano pueden representarse a partir del comando plot por los ejes que utiliza. En algunos casos nos vemos obligados a utilizar otros sistemas de coordenadas o a cambiar las referencias de los ejes. Estas funciones nos pueden ser de utilidad.

semilogx(...)
Su uso y funcionamiento es idéntico al de la función plot. Representa gráficamente una serie de puntos tomando logaritmos en el eje x.

semilogy(...)
Su uso y funcionamiento es idéntico al de la función plot. Representa gráficamente una serie de puntos tomando logaritmos en el eje y.

loglog(...)
Su uso y funcionamiento es idéntico al de la función plot. Representa gráficamente una serie de puntos tomando logaritmos en ambos ejes.

polar(...)
Su uso y funcionamiento es idéntico al de la función plot. Representa gráficamente una serie de datos en coordenadas polares. El primer argumento corresponde al ángulo respecto a la dirección principal \theta y el segundo a la distancia respecto al centro de referencia \rho.

Un ejemplo de uso de la función polar es el siguiente

>> x = linspace(-pi,pi,100);
>> polar(x, cos(2.*x));
_images/polar.png
Ejemplo de gráfica en coordenadas polares

Plot handles
Cada comando cuya salida se expresa en una figura puede también devolver un argumento llamado plot handle. Utilicemos como ejemplo la figura anterior.

>> x = linspace(-pi,pi,100);
>> h = polar(x, cos(2.*x));
Entonces, a parte de representar la curva, h es una variable que contiene toda la información correspondiente a la misma y dentro del léxico de Matlab suele recibir el nombre de handle. Con la función get podemos obtener toda la información del handle y mediante la función set podemos cambiar sus propiedades según nuestras necesidades. Lo más interesante es que no sólo las curvas devuelven un handle; todos los objetos gráficos, incluso los ejes o la propia figura genera un handle.

get(h)
Función que obtiene las características de un handle gráfico, ya sea una curva, los ejes de la figura o la misma figura

set(h, attr, val)
Funcion que modifica las características de un handle gráfico, ya sea una curva, los ejes de la figura o la misma figura. Los argumentos siempre son, por este orden:

H :	El handle
Attr :	Un atributo válido del handle como cadena de caracteres
Val :	El nuevo valor del atributo.
En el caso de las curvas o de la propia figura es la propia función (plot, semilogx o figure) la que genera el handle pero también podemos utilizar las funciones que devuelven handles como argumentos de salida.

gca()
No necesita ningún argumento. Devuelve el handle de los ejes de la figura activa.

gcf()
No necesita ningún argumento. Devuelve el handle de la figura activa

Utilizamos algunos de estos comandos en el ejemplo siguiente:

p=plot([1,2,3,2,1]);
set(p,'linewidth',2);
set(p,'marker','o');
set(p,'markersize',12);
set(p,'markerfacecolor','y');
set(p,'markeredgecolor','r');
t=title('Pirámide');
set(t,'fontsize',14);  
set(t,'color','g');
_images/piramide.png
Ejemplo de uso de set

Subplots
Representación de datos en el plano
Ejercicio de síntesis
El objetivo de este ejercicio es volver al ejercicio de síntesis en el que estudiábamos la convergencia de las series de Taylor. Vimos que, a medida que añadíamos términos a la serie esta se acercaba al valor de la función en las cercanías del punto en el que se calculaba. El resultado al que llegamos era una serie de puntos que lo demostraba para la función exponencial.

Aprovechando que ya disponemos de una función que genera las series vamos a representar gráficamente la función junto con una serie de desarrollos de Taylor con distinto orden. Después representaremos el error de la aproximación restando el desarrollo a la función y finalmente el error en función del orden en dos puntos cercanos al origen.

clf
clear all

exp_serie = @(x,n) polyval(1./[factorial(linspace(n,1,n)),1],x);

figure(1)

x = linspace(0,3,100);
plot(x,exp(x),...
     x,exp_serie(x,1),...
     x,exp_serie(x,2),...
     x,exp_serie(x,3),...
     x,exp_serie(x,4),...
     x,exp_serie(x,5));
legend('exacta','n=1','n=2','n=3','n=4','n=5');
title('Desarrollos de Taylor de una funcion exponencial en x=0');
xlabel('x')
ylabel('y')

figure(2)
semilogy(x,exp(x)-exp_serie(x,1),...
	 x,exp(x)-exp_serie(x,2),...
	 x,exp(x)-exp_serie(x,3),...
	 x,exp(x)-exp_serie(x,4),...
	 x,exp(x)-exp_serie(x,5));
legend('n=1','n=2','n=3','n=4','n=5');
hold on

semilogy([0.1,0.1,0.1,0.1,0.1],[...
    exp(0.1)-exp_serie(0.1,1),...
    exp(0.1)-exp_serie(0.1,2),...
    exp(0.1)-exp_serie(0.1,3),...
    exp(0.1)-exp_serie(0.1,4),...
    exp(0.1)-exp_serie(0.1,5),...
		   ],'ko')

semilogy([0.2,0.2,0.2,0.2,0.2],[...
    exp(0.2)-exp_serie(0.2,1),...
    exp(0.2)-exp_serie(0.2,2),...
    exp(0.2)-exp_serie(0.2,3),...
    exp(0.2)-exp_serie(0.2,4),...
    exp(0.2)-exp_serie(0.2,5),...
		   ],'ko')
       
xlabel('x')
ylabel('exp(x)-p_n(x)')
title('Error de las aproximaciones')

figure(3)
semilogy([0,1,2,3,4,5,6,7,8],[exp(0.1),...
		    exp(0.1)-exp_serie(0.1,1),...
		    exp(0.1)-exp_serie(0.1,2),...
		    exp(0.1)-exp_serie(0.1,3),...
		    exp(0.1)-exp_serie(0.1,4),...
		    exp(0.1)-exp_serie(0.1,5),...
		    exp(0.1)-exp_serie(0.1,6),...
		    exp(0.1)-exp_serie(0.1,7),...
		    exp(0.1)-exp_serie(0.1,8)],...
           'ko')
hold on
semilogy([0,1,2,3,4,5,6,7,8],[exp(0.2),...
		    exp(0.2)-exp_serie(0.2,1),...
		    exp(0.2)-exp_serie(0.2,2),...
		    exp(0.2)-exp_serie(0.2,3),...
		    exp(0.2)-exp_serie(0.2,4),...
		    exp(0.2)-exp_serie(0.2,5),...
		    exp(0.2)-exp_serie(0.2,6),...
		    exp(0.2)-exp_serie(0.2,7),...
		    exp(0.2)-exp_serie(0.2,8)],...
           'bo')

legend('punto 0.1', 'punto 0.2');
axis([-0.1,8.1,1e-16,1e1]);
xlabel('Orden')
ylabel('exp(x)-p_n(x)')
title('Convergencia de aproximaciones')
_images/desarrollo.png
La función exponencial y sus desarrollos de Taylor en el origen hasta orden 5.

_images/error.png
Error del desarrollo. Los puntos son los valores en las abcisas x=0.1 y x=0.2 respectivamente

_images/convergencia.png
Convergencia en función del orden.


Contenidos
Representación Gráfica
Curvas en el plano
Figura activa
Etiquetas
Otros comandos
Plot handles
Subplots
Representación de datos en el plano
Ejercicio de síntesis
Tema anterior
Control de Flujo de Ejecución

Próximo tema
Estadística Descriptiva y análisis de datos

Esta página
Enseñar el código
Búsqueda rápida

  Ir a
Enter search terms or a module, class or function name.

índicesiguiente |anterior |Intro a M y O »
©(http://guillemborrell.es) Copyright 2009-2011, Guillem Borrell i Nogueras. Creado con Sphinx 1.0.7.